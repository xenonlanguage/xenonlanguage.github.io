<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xenon</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Xenon</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 24 Mar 2025 07:34:14 -0400</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>XVM</title>
      <link>http://localhost:1313/updates/2025/03-24-xvm/</link>
      <pubDate>Mon, 24 Mar 2025 07:34:14 -0400</pubDate>
      <guid>http://localhost:1313/updates/2025/03-24-xvm/</guid>
      <description>&lt;p&gt;I have begun work on a code generation backend called XVM.&#xA;The IR is basically assembly, but it compiles platform independently.&#xA;XVM will be avalible on crates.io soon.&#xA;Sorry for the delays on new stuff for Xenon.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Documentation Added!</title>
      <link>http://localhost:1313/updates/2025/03-21-documentation-added/</link>
      <pubDate>Fri, 21 Mar 2025 19:43:52 -0400</pubDate>
      <guid>http://localhost:1313/updates/2025/03-21-documentation-added/</guid>
      <description>&lt;p&gt;I have added some documentation of the Xenon syntax to the website under the &lt;em&gt;Docs&lt;/em&gt; link which should be avalible at the top of your screen now! Please reach out to me on discord at the username applepieonrye if you notice any mistakes!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Website Created!</title>
      <link>http://localhost:1313/updates/2025/03-21-website-created/</link>
      <pubDate>Fri, 21 Mar 2025 15:10:02 -0400</pubDate>
      <guid>http://localhost:1313/updates/2025/03-21-website-created/</guid>
      <description>&lt;p&gt;Xenon now has a website!&lt;/p&gt;&#xA;&lt;p&gt;Expect updates here when something cool happens.&lt;/p&gt;</description>
    </item>
    <item>
      <title>About</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/about/</guid>
      <description>&lt;h2 id=&#34;why-xenon&#34;&gt;Why Xenon?&lt;/h2&gt;&#xA;&lt;p&gt;Xenon is a programming language without a compiler at the moment. Code generation and lexing are finished, but that&amp;rsquo;s about it.&lt;/p&gt;&#xA;&lt;h2 id=&#34;is-this-really-a-good-way-to-spend-your-time&#34;&gt;Is this really a good way to spend your time&lt;/h2&gt;&#xA;&lt;p&gt;No&lt;/p&gt;&#xA;&lt;h2 id=&#34;will-xenon-be-completed&#34;&gt;Will Xenon be completed?&lt;/h2&gt;&#xA;&lt;p&gt;Probably&lt;/p&gt;&#xA;&lt;h2 id=&#34;where-can-i-find-it&#34;&gt;Where can I find it&lt;/h2&gt;&#xA;&lt;p&gt;Although there is no compiler available for Xenon at the moment, you can find the code generation and lexer on my &lt;a href=&#34;https://github.com/ApplePieCodes&#34;&gt;GitHub Account&lt;/a&gt;. The parser is a work in progress.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Xenon Documentation</title>
      <link>http://localhost:1313/docs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/</guid>
      <description>&lt;h2 id=&#34;the-documentation-for-the-xenon-programming-language&#34;&gt;The documentation for the Xenon Programming Language&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://localhost:1313/docs/syntax/&#34;&gt;Xenon Syntax&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Xenon Syntax</title>
      <link>http://localhost:1313/docs/syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/syntax/</guid>
      <description>&lt;p&gt;This page gives a writtin syntax of the xenon programming language in Antlr4 form. For a higher level view of the syntax, check out the &lt;a href=&#34;https://crates.io/crates/xenon-codegen&#34;&gt;xenon-codegen&lt;/a&gt; crate.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-antlr4&#34; data-lang=&#34;antlr4&#34;&gt;grammar Xenon;&#xA;&#xA;program:&#xA; top_level_item*;&#xA;&#xA;name: (&amp;#39;a..z&amp;#39; | &amp;#39;A..Z&amp;#39;) (&amp;#39;a..z&amp;#39; | &amp;#39;A..Z&amp;#39; | &amp;#39;0..9&amp;#39;)*;&#xA;&#xA;identifier: name (&amp;#39;.&amp;#39; name)?;&#xA;&#xA;attribute: &amp;#39;#[&amp;#39; identifier ( &amp;#39;(&amp;#39; identifier &amp;#39;)&amp;#39; )? &amp;#39;]&amp;#39;;&#xA;&#xA;visibility:&#xA; &amp;#39;public&amp;#39; | &amp;#39;private&amp;#39;;&#xA;&#xA;top_level_item: attribute* (use_statement | module);&#xA;&#xA;module: attribute* visibility? &amp;#39;module&amp;#39; &amp;#39;{&amp;#39; module_item &amp;#39;}&amp;#39;;&#xA;&#xA;module_item:&#xA; module&#xA; | use_statement&#xA; | function_declaration&#xA; | struct_declaration&#xA;    | impl_declaration&#xA; | enum_declaration&#xA; | trait_declaration;&#xA;&#xA;struct_declaration: visibility? &amp;#39;struct&amp;#39; type &amp;#39;{&amp;#39; variable_definition* &amp;#39;}&amp;#39;;&#xA;&#xA;impl_declaration: &amp;#39;impl&amp;#39; (type &amp;#39;for&amp;#39;) type &amp;#39;{&amp;#39; function_declaration* &amp;#39;}&amp;#39;;&#xA;&#xA;enum_declaration: visibility? &amp;#39;enum&amp;#39; &amp;#39;{&amp;#39; variant* &amp;#39;}&amp;#39;;&#xA;&#xA;variant: identifier (&amp;#39;(&amp;#39; type &amp;#39;)&amp;#39;)?;&#xA;&#xA;trait_declaration: visibility? &amp;#39;trait&amp;#39; type &amp;#39;{&amp;#39; (variable_definition | function_declaration)* &amp;#39;}&amp;#39;;&#xA;&#xA;type: identifier (&amp;#39;&amp;lt;&amp;#39; type &amp;#39;&amp;gt;&amp;#39;)?;&#xA;&#xA;use_statement: &amp;#39;use&amp;#39; identifier &amp;#39;;&amp;#39;;&#xA;&#xA;function_head: visibility? &amp;#39;async&amp;#39;? identifier;&#xA;&#xA;function_declaration: function_head &amp;#39;(&amp;#39; function_arguments? &amp;#39;)&amp;#39; function_type? statement;&#xA;&#xA;function_arguments: function_param (&amp;#39;,&amp;#39; function_param)*;&#xA;&#xA;function_param: identifier &amp;#39;:&amp;#39; type;&#xA;&#xA;function_type: &amp;#39;-&amp;gt;&amp;#39; type;&#xA;&#xA;statement: &#xA;    attribute*&#xA;    block&#xA;    | variable_definition&#xA;    | variable_assignment&#xA;    | function_call&#xA;    | if_statement&#xA;    | while_statement&#xA;    | loop_statement&#xA;    | return_statement&#xA;    | unsafe_block&#xA;    | break_statement&#xA;    | continue_statement&#xA;    ;&#xA;&#xA;block: &amp;#39;{&amp;#39; statement* &amp;#39;}&amp;#39;;&#xA;&#xA;variable_definition: visibility? &amp;#39;let&amp;#39; identifier &amp;#39;=&amp;#39; expression &amp;#39;;&amp;#39;;&#xA;&#xA;variable_assignment: identifier &amp;#39;+=&amp;#39; | &amp;#39;-=&amp;#39; | &amp;#39;*=&amp;#39; | &amp;#39;/=&amp;#39; | &amp;#39;=&amp;#39; expression &amp;#39;;&amp;#39;;&#xA;&#xA;function_call: identifier &amp;#39;(&amp;#39; expression? (&amp;#39;,&amp;#39; expression)* &amp;#39;)&amp;#39; &amp;#39;;&amp;#39;;&#xA;&#xA;if_statement: &amp;#39;if&amp;#39; expression statement (&amp;#39;else&amp;#39; statement)?;&#xA;&#xA;while_statement: &amp;#39;while&amp;#39; expression statement;&#xA;&#xA;loop_statement: &amp;#39;loop&amp;#39; statement;&#xA;&#xA;return_statement: &amp;#39;return&amp;#39; expression? &amp;#39;;&amp;#39;;&#xA;&#xA;unsafe_block: &amp;#39;unsafe&amp;#39; block;&#xA;&#xA;break_statement: &amp;#39;break&amp;#39; &amp;#39;;&amp;#39;;&#xA;&#xA;continue_statement: &amp;#39;continue&amp;#39; &amp;#39;;&amp;#39;;&#xA;&#xA;expression: &#xA;    parentheses&#xA;    | literal&#xA;    | unary_operation;&#xA;&#xA;parentheses: &amp;#39;(&amp;#39; expression &amp;#39;)&amp;#39;;&#xA;&#xA;unary_operation: &#xA;    or_expr&#xA;    |(&amp;#39;+&amp;#39; | &amp;#39;-&amp;#39; | &amp;#39;!&amp;#39; | &amp;#39;&amp;amp;&amp;#39; | &amp;#39;*&amp;#39; expression);&#xA;&#xA;cast_expr:&#xA;    unary_operation&#xA;    | cast_expr &amp;#39;as&amp;#39; type;&#xA;&#xA;mul_expr:&#xA;    cast_expr&#xA;    | mul_expr &amp;#39;*&amp;#39; cast_expr&#xA;    | mul_expr &amp;#39;/&amp;#39; cast_expr&#xA;    | mul_expr &amp;#39;%&amp;#39; cast_expr;&#xA;&#xA;add_expr:&#xA;    mul_expr&#xA;    | add_expr &amp;#39;+&amp;#39; mul_expr&#xA;    | add_expr &amp;#39;-&amp;#39; mul_expr;&#xA;&#xA;shift_expr:&#xA;    add_expr&#xA;    | shift_expr &amp;#39;&amp;lt;&amp;lt;&amp;#39; add_expr&#xA;    | shift_expr &amp;#39;&amp;gt;&amp;gt;&amp;#39; add_expr;&#xA;&#xA;bit_and_expr:&#xA;    shift_expr&#xA;    | bit_and_expr &amp;#39;&amp;amp;&amp;#39; shift_expr;&#xA;&#xA;bit_xor_expr:&#xA;    bit_and_expr&#xA;    | bit_xor_expr &amp;#39;^&amp;#39; bit_and_expr;&#xA;&#xA;bit_or_expr:&#xA;    bit_xor_expr&#xA;    | bit_or_expr &amp;#39;|&amp;#39; bit_xor_expr;&#xA;&#xA;cmp_expr:&#xA;    bit_or_expr&#xA;    | bit_or_expr (&amp;#39;==&amp;#39; | &amp;#39;!=&amp;#39; | &amp;#39;&amp;lt;&amp;#39; | &amp;#39;&amp;lt;=&amp;#39; | &amp;#39;&amp;gt;&amp;#39; | &amp;#39;&amp;gt;=&amp;#39;) bit_or_expr;&#xA;&#xA;and_expr:&#xA;    cmp_expr&#xA;    | and_expr &amp;#39;&amp;amp;&amp;amp;&amp;#39; cmp_expr;&#xA;&#xA;or_expr:&#xA;    and_expr&#xA;    | or_expr &amp;#39;||&amp;#39; and_expr;&#xA;&#xA;literal:&#xA;    boolean_literal&#xA;    | integer_literal&#xA;    | hex_literal&#xA;    | binary_literal&#xA;    | float_literal&#xA;    | char_literal&#xA;    | string_literal&#xA;    | function_call_expr;&#xA;&#xA;boolean_literal: &amp;#39;true&amp;#39; | &amp;#39;false&amp;#39;;&#xA;integer_literal: &amp;#39;0..9&amp;#39;+;&#xA;hex_literal: &amp;#39;0x&amp;#39; (&amp;#39;0..9&amp;#39; | &amp;#39;a..f&amp;#39; | &amp;#39;A..F&amp;#39;)+;&#xA;binary_literal: &amp;#39;0b&amp;#39; (&amp;#39;0&amp;#39; | &amp;#39;1&amp;#39;)+;&#xA;float_literal: &amp;#39;0..9&amp;#39;+ &amp;#39;.&amp;#39; &amp;#39;0..9&amp;#39;+;&#xA;char_literal: &amp;#39;\&amp;#39;&amp;#39; &amp;#39;.&amp;#39; &amp;#39;\&amp;#39;&amp;#39;;&#xA;string_literal: &amp;#39;&amp;#34;&amp;#39; &amp;#39;.&amp;#39;* &amp;#39;&amp;#34;&amp;#39;;&#xA;&#xA;function_call_expr: identifier &amp;#39;(&amp;#39; expression? (&amp;#39;,&amp;#39; expression)* &amp;#39;)&amp;#39;;&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>
