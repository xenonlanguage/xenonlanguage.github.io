<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on Xenon</title>
    <link>http://localhost:1313/docs/</link>
    <description>Recent content in Docs on Xenon</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="http://localhost:1313/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Xenon Documentation</title>
      <link>http://localhost:1313/docs/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/main/</guid>
      <description>&lt;h2 id=&#34;the-documentation-for-the-xenon-programming-language&#34;&gt;The documentation for the Xenon Programming Language&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://localhost:1313/docs/syntax/&#34;&gt;Xenon Syntax&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Xenon Syntax</title>
      <link>http://localhost:1313/docs/syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/syntax/</guid>
      <description>&lt;p&gt;This page gives a writtin syntax of the xenon programming language in a psudocode form. For a higher level view of the syntax, check out the &lt;a href=&#34;https://crates.io/crates/xenon-codegen&#34;&gt;xenon-codegen&lt;/a&gt; crate.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-none&#34; data-lang=&#34;none&#34;&gt;visibility =&amp;gt; &amp;#39;public&amp;#39; | &amp;#39;private&amp;#39;;&#xA;name =&amp;gt; (&amp;#39;a&amp;#39;..&amp;#39;z&amp;#39; &amp;#39;A&amp;#39;..&amp;#39;Z&amp;#39; &amp;#39;_&amp;#39;) (&amp;#39;a&amp;#39;..&amp;#39;z&amp;#39; &amp;#39;A&amp;#39;..&amp;#39;Z&amp;#39; &amp;#39;_&amp;#39; &amp;#39;0&amp;#39;..&amp;#39;9&amp;#39;)*;&#xA;identifier =&amp;gt; name (&amp;#39;.&amp;#39; | &amp;#39;-&amp;gt;&amp;#39; name &amp;#39;(&amp;#39; expression? ( &amp;#39;,&amp;#39; expression)* &amp;#39;)&amp;#39;)*;&#xA;attribute =&amp;gt; &amp;#39;#[&amp;#39; name (&amp;#39;(&amp;#39; name &amp;#39;)&amp;#39; )? &amp;#39;]&amp;#39;;&#xA;case =&amp;gt; &amp;#39;case&amp;#39; expression scope;&#xA;variant =&amp;gt; attribute* name;&#xA;enum =&amp;gt; attribute* visibility? &amp;#39;enum&amp;#39; name &amp;#39;{&amp;#39; variant? ( &amp;#39;,&amp;#39; variant)* &amp;#39;}&amp;#39;;&#xA;integer_literal =&amp;gt; (&amp;#39;0&amp;#39;..&amp;#39;9&amp;#39;)+;&#xA;float_literal =&amp;gt; (&amp;#39;0&amp;#39;..&amp;#39;9&amp;#39;+ &amp;#39;.&amp;#39; &amp;#39;0&amp;#39;..&amp;#39;9&amp;#39;+);&#xA;string_literal =&amp;gt; &amp;#39;&amp;#34;&amp;#39; * &amp;#39;&amp;#34;&amp;#39;;&#xA;boolean_literal =&amp;gt; &amp;#39;true&amp;#39; | &amp;#39;false&amp;#39;;&#xA;parentheses =&amp;gt; &amp;#39;(&amp;#39; expression &amp;#39;)&amp;#39;;&#xA;unary_operation =&amp;gt; ( &amp;#39;-&amp;#39; | &amp;#39;*&amp;#39; | &amp;#39;&amp;amp;&amp;#39; ) expression;&#xA;binary_operation =&amp;gt;  expression &amp;#39;+&amp;#39; | &amp;#39;-&amp;#39; | &amp;#39;*&amp;#39; | &amp;#39;/&amp;#39; | &amp;#39;==&amp;#39; | &amp;#39;&amp;lt;&amp;#39; | &amp;#39;&amp;gt;&amp;#39; | &amp;#39;&amp;lt;=&amp;#39; | &amp;#39;&amp;gt;=&amp;#39; expression;&#xA;expression =&amp;gt; integer_literal | float_literal | string_literal | boolean_literal | parentheses | unary_operation | binary_operation | identifier;&#xA;function =&amp;gt; attribute* &amp;#39;async&amp;#39;? visibility? &amp;#39;fn&amp;#39; name &amp;#39;(&amp;#39; argument? ( &amp;#39;,&amp;#39; argument)* &amp;#39;)&amp;#39; (&amp;#39;-&amp;gt;&amp;#39; type)? statement;&#xA;argument =&amp;gt; name &amp;#39;:&amp;#39; type;&#xA;if_statement =&amp;gt; &amp;#39;if&amp;#39; &amp;#39;(&amp;#39; expression &amp;#39;)&amp;#39; statement ( &amp;#39;else&amp;#39; statement )?;&#xA;impl =&amp;gt; attribute* &amp;#39;impliment&amp;#39; ( type &amp;#39;for&amp;#39; )? type &amp;#39;{&amp;#39; function* &amp;#39;}&amp;#39;;&#xA;loop_statement =&amp;gt; &amp;#39;loop&amp;#39; statement;&#xA;module_item =&amp;gt; module | struct | function | (visibility? variable_definition) | trait | enum | impl;&#xA;module =&amp;gt; attribute* visibility? module name &amp;#39;{&amp;#39; module_item* &amp;#39;}&amp;#39;&#xA;return_statement =&amp;gt; &amp;#39;return&amp;#39; expression?;&#xA;scope =&amp;gt; &amp;#39;{&amp;#39; statement* &amp;#39;}&amp;#39;;&#xA;statement =&amp;gt; scope | (variable_definition &amp;#39;;&amp;#39;) | (variable_assignment &amp;#39;;&amp;#39;) | (identifier &amp;#39;;&amp;#39;) /*function_call*/ | if_statement | while_statement | loop_statement | (return_statement &amp;#39;;&amp;#39;) | unsafe | &amp;#39;break;&amp;#39; | &amp;#39;continue;&amp;#39;;&#xA;struct =&amp;gt; attribute* visibility? &amp;#39;struct&amp;#39; type (&amp;#39;:&amp;#39; type) &amp;#39;{&amp;#39; (visibility? variable_definition) &amp;#39;;&amp;#39; * &amp;#39;}&amp;#39;;&#xA;switch_statement =&amp;gt; &amp;#39;switch&amp;#39; &amp;#39;(&amp;#39; expression &amp;#39;)&amp;#39; &amp;#39;{&amp;#39; case* &amp;#39;}&amp;#39;;&#xA;trait =&amp;gt; attribute* visibility? &amp;#39;trait&amp;#39; type &amp;#39;{&amp;#39; (function | (visibility? variable_definition &amp;#39;;&amp;#39;) )* &amp;#39;}&amp;#39;;&#xA;type =&amp;gt; &amp;#39;*&amp;#39;? identifier (&amp;#39;&amp;lt;&amp;#39; type &amp;#39;&amp;gt;&amp;#39;)?;&#xA;unsafe =&amp;gt; &amp;#39;unsafe&amp;#39; statement;&#xA;variable_assignment =&amp;gt; identifier &amp;#39;+=&amp;#39; | &amp;#39;-=&amp;#39; | &amp;#39;*=&amp;#39; | &amp;#39;/=&amp;#39; | &amp;#39;=&amp;#39; expression;&#xA;variable_definition =&amp;gt; &amp;#39;let&amp;#39; name (&amp;#39;:&amp;#39; type)? (&amp;#39;=&amp;#39; expression)?;&#xA;while_statement =&amp;gt; &amp;#39;while&amp;#39; &amp;#39;(&amp;#39; expression &amp;#39;)&amp;#39; statement;&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>
